package day10;

public class Ex01 {
/*
	객체지향 언어 주요 특징
	
	1. 코드의 재사용성이 높다
	-> 변수 및 필드의 재사용 : 일반적인 지역변수는 함수가 종료되면 소멸, 필드는 값이 계속 유지
	-> 함수, 메서드의 재사용 : 클래스의 출력메서드를 한번만 작성해두면, 여러 객체가 동일한 메서드를 호출할수 있다
	-> 클래스의 재사용 : 상속(extends, implements)을 통해 만들어진 클래스를 기반으로 새용운 내용을 만들수 있다
	
	2. 코드의 관리가 용이하다
	-> 작성시 객체 지향 원칙을 지켰다면, 코드의 유지보수가 수월해진다
	-> 객체 지향 5대 원칙(단일 책임 원칙, 하나의 함수 및 클래스는 하나의 기능만 담당하도록 설계한다)
	
	3. 신뢰성이 높은 프로그래밍을 가능하게 한다
	-> 이미 잘 만들어진 클래스를 기반으로 하여 새로운 코드를 작성하기가 용이하다 (상속)
	-> 기존 클래스를 상속받지 않더라도, 내부에서 활용하는 형태로 코드를 작성할 수 있다
	
	클래스 : 서로 다른 자료형의 변수와 함수를 사용하여 만드는 사용자 정의 자료형
	객체 : 클래스에 의해 만들어진 실제 데이터
	
	속성, 변수, 필드 ,명사, attribute, property
	기능, 함수, 메서드, 동사, method, function, procedure
	
	객체, object vs instance
	
	특정 자료형을 명시하지 않은, 코드 및 현실에 존재하는 모든 객체를 나타낼수 있는 object라고 표현한다
	특정 클래스에 의해 만들어진 객체는, 클래스를 실체화 한다고 하여 instance 라고 표현한다
	
	책상은 인스턴스다(△)		/ 책상은 객체(object)이다 (O)
	책상은 객체(object)이다(O)	/ 책상은 책상 클래스의 인스턴스이다 (O)
	
	
	
	
 */
}
